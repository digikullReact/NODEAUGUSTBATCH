//middlewares  //covered
//clean code architecture  --> folder structure for our apis //done
// Friday --->aggregation /groupby /embedded deocuments //done
//file operations
//testing


// tomorrow --->testing 
// find with skip and limit
// --->file upload // file operations

//  ---->Demo for blocking code and non blocking code 
//worker_threads //clustering --->

//crud operations // routing //done ---> jwt authetication -->//pagination with find
//File Upload
//centrallized error handling
//centrallized response
// logging 
//testing --->jest and supertest //unit ,intergration test
//  caching  --->mechanism  --->redis ---cache

//Mongodb -->find ,create ,update ,delete,aggregate -->

//  --->heroku

//aws domain redirect

mongoose hooks --->password hashing
// Debugger vs code



Middleware is a design pattern to eloquently add cross cutting concerns like logging, handling authentication, 
or gzip compression without having many code contact points. Since these cross-cutting concerns are 
handled in middleware, the controllers/user defined handlers can focus on the core business logic.